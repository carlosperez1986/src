// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modular.Modules.Core.Data;

namespace WebApplication.Migrations
{
    [DbContext(typeof(SimplDbContext))]
    partial class SimplDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Core_RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Core_UserToken");
                });

            modelBuilder.Entity("Modular.Module.Core.Models.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code3")
                        .HasMaxLength(450);

                    b.Property<bool>("IsBillingEnabled");

                    b.Property<bool>("IsCityEnabled");

                    b.Property<bool>("IsDistrictEnabled");

                    b.Property<bool>("IsShippingEnabled");

                    b.Property<bool>("IsZipCodeEnabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_Country");

                    b.HasData(
                        new
                        {
                            Id = "VN",
                            Code3 = "VNM",
                            IsBillingEnabled = true,
                            IsCityEnabled = false,
                            IsDistrictEnabled = true,
                            IsShippingEnabled = true,
                            IsZipCodeEnabled = false,
                            Name = "Việt Nam"
                        },
                        new
                        {
                            Id = "US",
                            Code3 = "USA",
                            IsBillingEnabled = true,
                            IsCityEnabled = true,
                            IsDistrictEnabled = false,
                            IsShippingEnabled = true,
                            IsZipCodeEnabled = true,
                            Name = "United States"
                        });
                });

            modelBuilder.Entity("Modular.Module.Core.Models.StateOrProvince", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(450);

                    b.Property<string>("CountryId")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Type")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Core_StateOrProvince");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = "VN",
                            Name = "Hồ Chí Minh",
                            Type = "Thành Phố"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "WA",
                            CountryId = "US",
                            Name = "Washington"
                        });
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(450);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(450);

                    b.Property<string>("City")
                        .HasMaxLength(450);

                    b.Property<string>("ContactName")
                        .HasMaxLength(450);

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Phone")
                        .HasMaxLength(450);

                    b.Property<long>("StateOrProvinceId");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("Core_Address");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressLine1 = "364 Cong Hoa",
                            ContactName = "Thien Nguyen",
                            CountryId = "VN",
                            StateOrProvinceId = 1L
                        });
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.AppSetting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsVisibleInCommonSettingPage");

                    b.Property<string>("Module")
                        .HasMaxLength(450);

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_AppSetting");

                    b.HasData(
                        new
                        {
                            Id = "Global.AssetVersion",
                            IsVisibleInCommonSettingPage = true,
                            Module = "Core",
                            Value = "1.0"
                        },
                        new
                        {
                            Id = "Theme",
                            IsVisibleInCommonSettingPage = false,
                            Module = "Core",
                            Value = "Generic"
                        },
                        new
                        {
                            Id = "Global.DefaultCultureUI",
                            IsVisibleInCommonSettingPage = true,
                            Module = "Core",
                            Value = "en-US"
                        },
                        new
                        {
                            Id = "Global.CurrencyCulture",
                            IsVisibleInCommonSettingPage = true,
                            Module = "Core",
                            Value = "en-US"
                        },
                        new
                        {
                            Id = "Global.CurrencyDecimalPlace",
                            IsVisibleInCommonSettingPage = true,
                            Module = "Core",
                            Value = "2"
                        });
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long>("StateOrProvinceId");

                    b.Property<string>("Type")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("Core_District");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Quận 1",
                            StateOrProvinceId = 1L,
                            Type = "Quận"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Quận 2",
                            StateOrProvinceId = 1L,
                            Type = "Quận"
                        });
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityId");

                    b.Property<string>("EntityTypeId")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Core_Entity");
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.EntityType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreaName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsMenuable");

                    b.Property<string>("RoutingAction")
                        .HasMaxLength(450);

                    b.Property<string>("RoutingController")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_EntityType");

                    b.HasData(
                        new
                        {
                            Id = "Vendor",
                            AreaName = "Core",
                            IsMenuable = false,
                            RoutingAction = "VendorDetail",
                            RoutingController = "Vendor"
                        });
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Core_Role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "4776a1b2-dbe4-4056-82ec-8bed211d1454",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2L,
                            ConcurrencyStamp = "00d172be-03a0-4856-8b12-26d63fcf4374",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3L,
                            ConcurrencyStamp = "d4754388-8355-4018-b728-218018836817",
                            Name = "guest",
                            NormalizedName = "GUEST"
                        },
                        new
                        {
                            Id = 4L,
                            ConcurrencyStamp = "71f10604-8c4d-4a7d-ac4a-ffefb11cefeb",
                            Name = "vendor",
                            NormalizedName = "VENDOR"
                        });
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Culture")
                        .HasMaxLength(450);

                    b.Property<long?>("DefaultBillingAddressId");

                    b.Property<long?>("DefaultShippingAddressId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RefreshTokenHash")
                        .HasMaxLength(450);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<Guid>("UserGuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<long?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("DefaultBillingAddressId");

                    b.HasIndex("DefaultShippingAddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Core_User");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "101cd6ae-a8ef-4a37-97fd-04ac2dd630e4",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 189, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "system@simplcommerce.com",
                            EmailConfirmed = false,
                            FullName = "System User",
                            IsDeleted = true,
                            LatestUpdatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 189, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSTEM@SIMPLCOMMERCE.COM",
                            NormalizedUserName = "SYSTEM@SIMPLCOMMERCE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEqSCV8Bpg69irmeg8N86U503jGEAYf75fBuzvL00/mr/FGEsiUqfR0rWBbBUwqtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9565acb-cee6-425f-9833-419a793f5fba",
                            TwoFactorEnabled = false,
                            UserGuid = new Guid("5f72f83b-7436-4221-869c-1b69b2e23aae"),
                            UserName = "system@simplcommerce.com"
                        },
                        new
                        {
                            Id = 10L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c83afcbc-312c-4589-bad7-8686bd4754c0",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 190, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "admin@simplcommerce.com",
                            EmailConfirmed = false,
                            FullName = "Shop Admin",
                            IsDeleted = false,
                            LatestUpdatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 190, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SIMPLCOMMERCE.COM",
                            NormalizedUserName = "ADMIN@SIMPLCOMMERCE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEqSCV8Bpg69irmeg8N86U503jGEAYf75fBuzvL00/mr/FGEsiUqfR0rWBbBUwqtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6847450-47f0-4c7a-9fed-0c66234bf61f",
                            TwoFactorEnabled = false,
                            UserGuid = new Guid("ed8210c3-24b0-4823-a744-80078cf12eb4"),
                            UserName = "admin@simplcommerce.com"
                        });
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.UserAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId");

                    b.Property<int>("AddressType");

                    b.Property<DateTimeOffset?>("LastUsedOn");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserAddress");
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.UserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Core_UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 10L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.Widget", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateUrl")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EditUrl")
                        .HasMaxLength(450);

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ViewComponentName")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_Widget");
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.WidgetInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Data");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("HtmlData");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset?>("PublishEnd");

                    b.Property<DateTimeOffset?>("PublishStart");

                    b.Property<string>("WidgetId")
                        .HasMaxLength(450);

                    b.Property<long>("WidgetZoneId");

                    b.HasKey("Id");

                    b.HasIndex("WidgetId");

                    b.HasIndex("WidgetZoneId");

                    b.ToTable("Core_WidgetInstance");
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.WidgetZone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_WidgetZone");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Home Featured"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Home Main Content"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Home After Main Content"
                        });
                });

            modelBuilder.Entity("Modular.Modules.ModuleC.Models.TestModels", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("TestModels");
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(450);

                    b.Property<string>("FileName")
                        .HasMaxLength(450);

                    b.Property<int>("FileSize");

                    b.Property<int>("MediaType");

                    b.HasKey("Id");

                    b.ToTable("Core_Media");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Modular.Modules.Core.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Modular.Modules.Core.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Modular.Modules.Core.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Modular.Modules.Core.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modular.Module.Core.Models.StateOrProvince", b =>
                {
                    b.HasOne("Modular.Module.Core.Models.Country", "Country")
                        .WithMany("StatesOrProvinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.Address", b =>
                {
                    b.HasOne("Modular.Module.Core.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Modular.Modules.Core.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Modular.Module.Core.Models.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.District", b =>
                {
                    b.HasOne("Modular.Module.Core.Models.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.Entity", b =>
                {
                    b.HasOne("Modular.Modules.Core.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.User", b =>
                {
                    b.HasOne("Modular.Modules.Core.Models.UserAddress", "DefaultBillingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultBillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Modular.Modules.Core.Models.UserAddress", "DefaultShippingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.UserAddress", b =>
                {
                    b.HasOne("Modular.Modules.Core.Models.Address", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Modular.Modules.Core.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.UserRole", b =>
                {
                    b.HasOne("Modular.Modules.Core.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Modular.Modules.Core.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Modular.Modules.Core.Models.WidgetInstance", b =>
                {
                    b.HasOne("Modular.Modules.Core.Models.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Modular.Modules.Core.Models.WidgetZone", "WidgetZone")
                        .WithMany()
                        .HasForeignKey("WidgetZoneId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
