@using Modular.Modules.Core.Models
@using Modular.Modules.Core.Extensions

@inject IWorkContext WorkContext

@inject SignInManager<User> SignInManager

@if (SignInManager.IsSignedIn(User))
{
    <div class="">
        <a class="nav-link" asp-controller="Manage" asp-action="Index" title="Manage"> @(await WorkContext.GetCurrentUser())</a>
    </div>
    if (User.IsInRole("admin") || User.IsInRole("vendor"))
    {
        <div class=""><a class="nav-link" asp-controller="HomeAdmin" asp-action="Index">["Dashboard"]</a></div>
    }
    <div class="">
        <form asp-controller="Account" asp-action="LogOff" method="post" id="logoutForm" class="">
            <button type="submit" class="btn btn-link"><i class="icon icon-remove"></i> Desconectar</button>
        </form>
    </div>
}
else
{
    <div class=""><a class="nav-link" asp-controller="Account" asp-action="Login">Acceder</a></div>
    <span>|</span>
    <div class=""><a class="nav-link" asp-controller="Account" asp-action="Register">Registrar</a></div>
}
